#include <iostream>
#include <random>

int get_el()
{
	std::random_device rd;
	std::mt19937 mersenne(rd());
	double persent = 1.0 / pow(2, 32);
	return static_cast<int>(persent * mersenne() * 10 + 1);
}

double determination(double **temp, int line)
{
	int i = 0;
	for ( i = 0; i < line - 1; i++)
	{
		for (int j = i; j < line-1; j++)
		{
			double first = temp[j + 1][i];
			for (int q = i; q < line; q++)
			{
				if (temp[i][i]!=0)
					temp[j + 1][q] -=temp[i][q] / temp[i][i]*first;
			}
		}
		for (int m = 0; m < line; m++)
		{
			std::cout << temp[i][m] << "\t";
		}
		std::cout << std::endl;
	}
	for (int m = 0; m < line; m++)
	{
		std::cout << temp[i][m] << "\t";
	}
	std::cout << std::endl;
	double ret = temp[0][0];
	for (int i = 1; i < line; i++)
		ret *= temp[i][i];
	if (ret * 5 == 0)
		return 0;
	return ret;
}

int main()
{
	int number_line = 0;
	std::cin >> number_line;
	double** array = new double* [number_line];
	for (int i = 0; i < number_line; i++)
	{
		double* colomn = new double[number_line];
		array[i] = colomn;
	}
	for (int i = 0; i < number_line; i++)
	{
		for (int j = 0; j < number_line; j++)
		{
			array[i][j] = get_el();
			std::cout << array[i][j] << "\t";
		}
		std::cout << std::endl;
	}
	std::cout << std::endl; std::cout << std::endl;
	std::cout << determination(array, number_line)<<std::endl;
	return 0;
}






//new version

#include <iostream>
#include <vector>

int main()
{
	std::vector< std::vector<long long> > m{ {2 ,4 ,5 ,3 ,1 ,2 ,},
{2 ,4 ,7 ,5 ,3 ,2 ,},
{1 ,1 ,0 ,2 ,3 ,1 ,},
{1 ,3 ,9 ,0 ,3 ,2 ,},
{1 ,1 ,2 ,2 ,4 ,1 ,},
{0 ,0 ,4 ,1 ,2 ,3 ,} };
	//{ {1 ,2 ,3 ,4 },{5 ,0 ,2 ,8 },{3 ,5 ,6 ,7},{2 ,5 ,3 ,1 } };
	int line = m.size();
	double** temp=new double* [line];
	for (size_t i = 0; i < line; ++i)
		temp[i] = new double[line];
	long long int product = 1;
	for(size_t i=0;i<line;++i)
		for (size_t j = 0; j < line; ++j)
		{
			temp[i][j] = m[i][j];
		}
	int i = 0;
	bool sw = false;

	for (i = 0; i < line - 1; i++)
	{
		if (temp[i][i] == 0)
		{
			std::swap(temp[i], temp[i + 1]);
			sw = true;
		}
		for (int j = i; j < line - 1; ++j)
		{
			double first = static_cast<double>(temp[j + 1][i]);
			for (int q = i; q < line; ++q)
			{
				if (temp[i][i] != 0)
					temp[j + 1][q] -=((temp[i][q]) /(temp[i][i]) * first);
			}
		}
		/*for (int temp = 0; temp < line; temp++)
		{
			std::cout << temp[i][temp] << "\t";
		}
		std::cout << std::endl;*/
	}
	/*for (int temp = 0; temp < line; temp++)
	{
		std::cout << temp[i][temp] << "\t";
	}
	std::cout << std::endl;*/


	double ret =static_cast<double>( temp[0][0]);
	for (int i = 1; i < line; i++)
		ret *= temp[i][i];
	if (ret * 5 == 0)
	std::cout << 0 << std::endl;
		//return 0;
	if (sw)
		ret *= -1;
	std::cout << round(ret) << std::endl;
	//return ret;
	return 0;
}


/*
for (size_t i = 0; i < line; ++i) {
	std::cout << "{";
	for (size_t j = 0; j < line; ++j)
	{
		temp[i][j] = m[i][j];
		std::cout << temp[i][j] << " ,";
	}
	std::cout << "}" << std::endl;
}*/
